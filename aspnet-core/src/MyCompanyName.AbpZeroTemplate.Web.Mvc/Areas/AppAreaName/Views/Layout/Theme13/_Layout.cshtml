@using Abp.Web.Mvc.Alerts
@using MyCompanyName.AbpZeroTemplate.Localization
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameActiveUserDelegationsCombobox
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameChatToggler
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameLanguageSwitch
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameLogo
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameMenu
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameQuickThemeSelect
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameRecentNotifications
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameSubscriptionBar
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameToggleDarkMode
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameUserMenu
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Themes.Theme12.Components.AppAreaNameTheme12Footer
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Themes.Theme12.Components.AppAreaNameTheme12Brand
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Themes.Theme13.Components.AppAreaNameTheme13Brand
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Themes.Theme13.Components.AppAreaNameTheme13Footer

@inject IAlertManager AlertManager
@{
    Layout = "~/Areas/AppAreaName/Views/Layout/_Layout.cshtml";
    var theme = await GetTheme();
}

@section Styles{
    <link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme13/css/style.bundle@(CultureHelper.IsRtl ? ".rtl" : "").css" asp-append-version="true"/>
    <link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme13/plugins/global/plugins.bundle@(CultureHelper.IsRtl ? ".rtl" : "").css" asp-append-version="true"/>
    <link rel="stylesheet" abp-href="/Common/Styles/Themes/theme13/metronic-customize.css" asp-append-version="true"/>
    <link rel="stylesheet" abp-href="/fonts/fonts-poppins.css" asp-append-version="true"/>
    @await RenderSectionAsync("Styles", false)
}

@section Scripts{
    @await RenderSectionAsync("Scripts", false)
}

<div class="d-flex flex-column flex-root">
    <div class="page d-flex flex-row flex-column-fluid">
        <div id="kt_aside" class="aside aside-dark aside-hoverable" data-kt-drawer="true" data-kt-drawer-name="aside" data-kt-drawer-activate="{default: true, lg: false}" data-kt-drawer-overlay="true" data-kt-drawer-width="{default:'200px', '300px': '250px'}" data-kt-drawer-direction="start" data-kt-drawer-toggle="#kt_aside_mobile_toggle">
            <div class="aside-logo flex-column-auto" id="kt_aside_logo">
                @await Component.InvokeAsync(typeof(AppAreaNameTheme13BrandViewComponent))
                <div id="kt_aside_toggle" class="btn btn-icon w-auto px-0 btn-active-color-primary aside-toggle me-n2" data-kt-toggle="true" data-kt-toggle-state="active" data-kt-toggle-target="body" data-kt-toggle-name="aside-minimize">
                    <!--begin::Svg Icon | path: icons/duotune/arrows/arr079.svg-->
                    <span class="svg-icon svg-icon-1 rotate-180">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path opacity="0.5" d="M14.2657 11.4343L18.45 7.25C18.8642 6.83579 18.8642 6.16421 18.45 5.75C18.0358 5.33579 17.3642 5.33579 16.95 5.75L11.4071 11.2929C11.0166 11.6834 11.0166 12.3166 11.4071 12.7071L16.95 18.25C17.3642 18.6642 18.0358 18.6642 18.45 18.25C18.8642 17.8358 18.8642 17.1642 18.45 16.75L14.2657 12.5657C13.9533 12.2533 13.9533 11.7467 14.2657 11.4343Z" fill="currentColor"></path>
                            <path d="M8.2657 11.4343L12.45 7.25C12.8642 6.83579 12.8642 6.16421 12.45 5.75C12.0358 5.33579 11.3642 5.33579 10.95 5.75L5.40712 11.2929C5.01659 11.6834 5.01659 12.3166 5.40712 12.7071L10.95 18.25C11.3642 18.6642 12.0358 18.6642 12.45 18.25C12.8642 17.8358 12.8642 17.1642 12.45 16.75L8.2657 12.5657C7.95328 12.2533 7.95328 11.7467 8.2657 11.4343Z" fill="currentColor"></path>
                        </svg>
                    </span>
                    <!--end::Svg Icon-->
                </div>
            </div>
            <div class="aside-menu flex-column-fluid">
                <div class="hover-scroll-overlay-y my-2 py-2" id="kt_aside_menu_wrapper" data-kt-scroll="true" data-kt-scroll-activate="{default: false, lg: true}" data-kt-scroll-height="auto" data-kt-scroll-dependencies="#kt_aside_logo, #kt_aside_footer" data-kt-scroll-wrappers="#kt_aside_menu" data-kt-scroll-offset="0">
                    @await Component.InvokeAsync(typeof(AppAreaNameMenuViewComponent), new
                    {
                        currentPageName = ViewBag.CurrentPageName,
                        isLeftMenuUsed = true,
                        sideMenuClass = "menu menu-column menu-title-gray-800 menu-state-title-primary menu-state-icon-primary menu-state-bullet-primary menu-arrow-gray-500"
                    })
                    </div>
                </div>
        </div>
        <div class="wrapper d-flex flex-column flex-row-fluid" id="kt_wrapper">
            <div id="kt_header" style="" class="header align-items-stretch">
                <div class="container-fluid d-flex align-items-stretch justify-content-between">
                    <div class="d-flex align-items-center d-lg-none ms-n3 me-1" title="Show aside menu">
                        <div class="btn btn-icon btn-active-color-white" id="kt_aside_mobile_toggle">
                            <i class="bi bi-list fs-1"></i>
                        </div>
                    </div>
                    <div class="d-flex align-items-center flex-grow-1 flex-lg-grow-0">
                        <a href="@Url.Action("Index", "Home", new {area = string.Empty})" class="d-lg-none">
                            @await Component.InvokeAsync(typeof(AppAreaNameLogoViewComponent), new {logoSkin = "dark-sm", logoClass="h-25px"})
                        </a>
                    </div>
                    <div class="d-flex align-items-stretch justify-content-end flex-lg-grow-1">
                        <div class="d-flex align-items-stretch flex-shrink-0">
                            <div class="topbar d-flex align-items-stretch flex-shrink-0">
                                @await Component.InvokeAsync(typeof(AppAreaNameActiveUserDelegationsComboboxViewComponent))
                                @await Component.InvokeAsync(typeof(AppAreaNameSubscriptionBarViewComponent), new
                                {
                                    cssClass = "btn btn-icon btn-active-color-white position-relative w-30px h-30px w-md-40px h-md-40px"
                                })
                                @await Component.InvokeAsync(typeof(AppAreaNameQuickThemeSelectViewComponent), new
                                {
                                    cssClass = "btn btn-icon btn-active-color-white w-30px h-30px w-md-40px h-md-40px"
                                })
                                @await Component.InvokeAsync(typeof(AppAreaNameLanguageSwitchViewComponent), new
                                {
                                    cssClass = "btn btn-icon btn-active-color-white w-30px h-30px w-md-40px h-md-40px"
                                })
                                @await Component.InvokeAsync(typeof(AppAreaNameRecentNotificationsViewComponent), new
                                {
                                    cssClass = "btn btn-relative btn-icon btn-active-color-white w-30px h-30px w-md-40px h-md-40px position-relative"
                                })
                                @await Component.InvokeAsync(typeof(AppAreaNameChatTogglerViewComponent), new
                                {
                                    cssClass = "btn btn-relative btn-icon btn-active-color-white w-30px h-30px w-md-40px h-md-40px position-relative"
                                })
                                @await Component.InvokeAsync(typeof(AppAreaNameToggleDarkModeViewComponent), new
                                {
                                    cssClass = "btn btn-relative btn-icon btn-active-color-white w-30px h-30px w-md-40px h-md-40px position-relative",
                                    isDarkModeActive = theme.BaseSettings.Layout.DarkMode
                                })
                                @await Component.InvokeAsync(typeof(AppAreaNameUserMenuViewComponent), new
                                {
                                    togglerCssClass = "topbar-item cursor-pointer symbol px-3 px-lg-5 me-n3 me-lg-n5 symbol-30px symbol-md-35px"
                                })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="content d-flex flex-column flex-column-fluid" id="kt_content">
                 @if (AlertManager.Alerts.Any())
                                        {
                                            <div id="AbpPageAlerts">
                                                @foreach (var alertMessage in AlertManager.Alerts)
                                                {
                                                    <div class="alert alert-@alertMessage.Type.ToString().ToLower() @Html.Raw(alertMessage.Dismissible ? "alert-dismissible" : "")" role="alert">
                                                        <div class="alert-text">
                                                            <h4 class="alert-heading">
                                                                @alertMessage.Title
                                                            </h4>
                                                            <p>@alertMessage.Text</p>
                                                        </div>
                                                        @if (alertMessage.Dismissible)
                                                        {
                                                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        }
                                        @RenderBody()
            </div>
            @await Component.InvokeAsync(typeof(AppAreaNameTheme13FooterViewComponent))
        </div>
    </div>
</div>