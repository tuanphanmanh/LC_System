@using Abp.Web.Mvc.Alerts
@using MyCompanyName.AbpZeroTemplate.Localization
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameActiveUserDelegationsCombobox
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameChatToggler
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameLanguageSwitch
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameLogo
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameMenu
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameQuickThemeSelect
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameRecentNotifications
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameSubscriptionBar
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameToggleDarkMode
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Components.AppAreaNameUserMenu
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Themes.Theme5.Components.AppAreaNameTheme5Brand
@using MyCompanyName.AbpZeroTemplate.Web.Areas.AppAreaName.Views.Shared.Themes.Theme5.Components.AppAreaNameTheme5Footer

@inject IAlertManager AlertManager

@{
    Layout = "~/Areas/AppAreaName/Views/Layout/_Layout.cshtml";
    var theme = await GetTheme();
}

@section Styles{
    <link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme5/css/style.bundle@(CultureHelper.IsRtl ? ".rtl" : "").css" asp-append-version="true"/>
    <link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme5/plugins/global/plugins.bundle@(CultureHelper.IsRtl ? ".rtl" : "").css" asp-append-version="true"/>
    <link rel="stylesheet" abp-href="/Common/Styles/Themes/theme5/metronic-customize.css" asp-append-version="true"/>
    <link rel="stylesheet" abp-href="/fonts/fonts-poppins.css" asp-append-version="true"/>
    @await RenderSectionAsync("Styles", false)
}

@section Scripts{
    @await RenderSectionAsync("Scripts", false)
}

<div class="d-flex flex-column flex-root">
    <!--begin::Page-->
    <div class="page d-flex flex-column flex-column-fluid">
        <!--begin::Header-->
        <div id="kt_header" class="header align-items-stretch">
            <!--begin::Container-->
            <div class="@(await GetContainerClass()) d-flex align-items-stretch justify-content-between">
                <div class="d-flex align-items-center flex-grow-1 flex-lg-grow-0 w-lg-225px me-5">
                    <div class="btn btn-icon btn-active-icon-primary ms-n2 me-2 d-flex d-lg-none" id="kt_aside_mobile_toggle">
                        <!--begin::Svg Icon | path: icons/duotune/abstract/abs015.svg-->
                        <span class="svg-icon svg-icon-1">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M21 7H3C2.4 7 2 6.6 2 6V4C2 3.4 2.4 3 3 3H21C21.6 3 22 3.4 22 4V6C22 6.6 21.6 7 21 7Z" fill="currentColor"></path>
                                <path opacity="0.3" d="M21 14H3C2.4 14 2 13.6 2 13V11C2 10.4 2.4 10 3 10H21C21.6 10 22 10.4 22 11V13C22 13.6 21.6 14 21 14ZM22 20V18C22 17.4 21.6 17 21 17H3C2.4 17 2 17.4 2 18V20C2 20.6 2.4 21 3 21H21C21.6 21 22 20.6 22 20Z" fill="currentColor"></path>
                            </svg>
                        </span>
                        <!--end::Svg Icon-->
                    </div>
                    @await Component.InvokeAsync(typeof(AppAreaNameTheme5BrandViewComponent))
                </div>
                <div class="topbar d-flex align-items-stretch flex-shrink-0">
                    @await Component.InvokeAsync(typeof(AppAreaNameActiveUserDelegationsComboboxViewComponent))
                    @await Component.InvokeAsync(typeof(AppAreaNameSubscriptionBarViewComponent), new
                    {
                        cssClass = "btn btn-icon btn-active-light btn-active-color-primary w-30px h-30px w-md-40px h-md-40px position-relative"
                    })
                    @await Component.InvokeAsync(typeof(AppAreaNameQuickThemeSelectViewComponent), new
                    {
                        cssClass = "btn btn-icon btn-active-light btn-active-color-primary w-30px h-30px w-md-40px h-md-40px position-relative"
                    })
                    @await Component.InvokeAsync(typeof(AppAreaNameLanguageSwitchViewComponent), new
                    {
                        cssClass = "btn btn-icon btn-active-light btn-active-color-primary w-30px h-30px w-md-40px h-md-40px position-relative"
                    })
                    @await Component.InvokeAsync(typeof(AppAreaNameRecentNotificationsViewComponent), new
                    {
                        cssClass = "btn btn-icon btn-active-light btn-active-color-primary w-30px h-30px w-md-40px h-md-40px position-relative"
                    })
                    @await Component.InvokeAsync(typeof(AppAreaNameChatTogglerViewComponent), new
                    {
                        cssClass = "btn btn-icon btn-active-light btn-active-color-primary w-30px h-30px w-md-40px h-md-40px position-relative"
                    })
                    @await Component.InvokeAsync(typeof(AppAreaNameToggleDarkModeViewComponent), new
                    {
                        cssClass = "btn btn-icon btn-active-light btn-active-color-primary w-30px h-30px w-md-40px h-md-40px position-relative",
                        isDarkModeActive = theme.BaseSettings.Layout.DarkMode
                    })
                    @await Component.InvokeAsync(typeof(AppAreaNameUserMenuViewComponent), new
                    {
                        togglerCssClass = "btn btn-active-light d-flex align-items-center bg-hover-light py-2 px-2 px-md-3 symbol symbol-30px symbol-md-40px",
                    })
                </div>
            </div>
            <!--end::Container-->
        </div>
        <!--end::Header-->
        <!--begin::Container-->
        <div id="kt_content_container" class="d-flex flex-column-fluid align-items-stretch @(await GetContainerClass())">
            <!--begin::Aside-->
            <div id="kt_aside" class="aside aside-@(theme.BaseSettings.Menu.AsideSkin) @(theme.BaseSettings.Menu.HoverableAside ? "aside-hoverable" : "")"
                 data-kt-drawer="true"
                 data-kt-drawer-name="aside"
                 data-kt-drawer-activate="{default: true, lg: false}"
                 data-kt-drawer-overlay="true"
                 data-kt-drawer-width="{default:'200px', '300px': '250px'}"
                 data-kt-drawer-direction="start"
                 data-kt-drawer-toggle="#kt_aside_mobile_toggle">
                <div class="aside-menu flex-column-fluid">
                    @await Component.InvokeAsync(typeof(AppAreaNameMenuViewComponent), new
                    {
                        currentPageName = ViewBag.CurrentPageName, 
                        isLeftMenuUsed = true,
                        sideMenuClass = "menu menu-column menu-active-bg menu-hover-bg menu-title-gray-700 fs-6 menu-rounded w-10"
                    })
                </div>
            </div>
            <!--end::Aside-->
            <!--begin::Wrapper-->
            <div class="wrapper d-flex flex-column flex-row-fluid mt-5 mt-lg-10" id="kt_wrapper">
                <!--begin::Content-->
                <div class="content flex-column-fluid" id="kt_content">
                    @if (AlertManager.Alerts.Any())
                    {
                        <div id="AbpPageAlerts">
                            @foreach (var alertMessage in AlertManager.Alerts)
                            {
                                <div class="alert alert-@alertMessage.Type.ToString().ToLower() @Html.Raw(alertMessage.Dismissible ? "alert-dismissible" : "")" role="alert">
                                    <div class="alert-text">
                                        <h4 class="alert-heading">
                                            @alertMessage.Title
                                        </h4>
                                        <p>@alertMessage.Text</p>
                                    </div>
                                    @if (alertMessage.Dismissible)
                                    {
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    }
                                </div>
                            }
                        </div>
                    }
                    @RenderBody()
                </div>
                <!--end::Content-->
                <!--begin::Footer-->
                @await Component.InvokeAsync(typeof(AppAreaNameTheme5FooterViewComponent))
                <!--end::Footer-->
            </div>
            <!--end::Wrapper-->
        </div>
        <!--end::Container-->
    </div>
    <!--end::Page-->
</div>